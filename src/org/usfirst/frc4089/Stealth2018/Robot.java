// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4089.Stealth2018.commands.*;
import org.usfirst.frc4089.Stealth2018.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;

    public static Drive drive;
    public static Elevator elevator;
    public static Picker picker;
    public static Utilities utilities;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        
        //start camera server
        UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
        camera.setResolution(160,120);
        camera.setFPS(24);
        
        drive = new Drive();
        elevator = new Elevator();
        picker = new Picker();
        utilities = new Utilities();

        System.out.println("robot init");
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        picker.unlockPciker();

        // Add commands to Autonomous Sendable Chooser

        chooser.addObject("1 Position One", new PositionOne());
        chooser.addObject("2 Position Two", new PositionTwo());
        chooser.addDefault("3 Position Three", new PositionThree());
        chooser.addObject("4 Position Four", new PositionFour());
        chooser.addObject("5 Position Five", new PositionFive());
        SmartDashboard.putData("Auto mode", chooser);
    }


    @Override
    public void robotPeriodic(){
    }
    
    @Override
    public void disabledInit(){
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        
        if(true == Robot.oi.mechJoystick.getRawButton(9))
        {
        
        System.out.format("%b %b %b %b %b %f %f %d %d\n", 
            RobotMap.elevatorSwitchTop.get(),
            RobotMap.elevatorSwitchBottom.get(),
            RobotMap.pickerElevatorSwitchTop.get(),
            RobotMap.pickerElevatorSwitchBottom.get(),
            RobotMap.pickerElevatorTotalBottom.get(),
            oi.mechJoystick.getRawAxis(1),
            oi.mechJoystick.getRawAxis(5),
            RobotMap.elevatorEncoder.get(),
            RobotMap.pickerElevatorEncoder.get()
            );
        
        }
    }

    Command mTestCommand;
    
    @Override
    public void autonomousInit() {
      RobotMap.SetUpTalonsForAuto();
      drive.ClearCurrentAngle();
//      mTestCommand = new ScoreInSwitch();
//      mTestCommand = new PositionThree();
//      Scheduler.getInstance().add(mTestCommand);
      drive.SetAuto();
      Robot.elevator.SetElevatorTarget(0);
      Robot.elevator.SetPickerElevatorTarget(0);
      
      
      autonomousCommand = chooser.getSelected();
      // schedule the autonomous command (example)
      if (autonomousCommand != null)
      {
        //autonomousCommand.start();
        Scheduler.getInstance().add(autonomousCommand);
      }
        
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        System.out.println("tele init");
        RobotMap.SetUpTalonsForTele();
        Robot.drive.SetTele();
        Robot.picker.ungrabClimber();
        RobotMap.utilitiesPCMCompressor.setClosedLoopControl(true);
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        Robot.drive.DriveRobot(oi.driveJoystick);
        Robot.elevator.DriveElevator(oi.mechJoystick);
        
        Robot.elevator.MoveElevatorToTarget();
        Robot.elevator.MovePickerElevatorToTarget();

        RobotMap.pickerLeftMotor.set(oi.mechJoystick.getRawAxis(0));
        RobotMap.pickerRightMotor.set(oi.mechJoystick.getRawAxis(0));
    }
    
    
    @Override
    public void testPeriodic() {
    }   
}
