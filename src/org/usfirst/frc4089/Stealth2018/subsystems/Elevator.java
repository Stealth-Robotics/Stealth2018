// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018.subsystems;

import org.usfirst.frc4089.Stealth2018.Constants;
import org.usfirst.frc4089.Stealth2018.RobotMap;
import org.usfirst.frc4089.Stealth2018.commands.*;
import org.usfirst.frc4089.Stealth2018.subsystems.Drive.DriveControlState;
import org.usfirst.frc4089.Stealth2018.utilities.DriveMath;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Elevator extends Subsystem {
    public void initDefaultCommand() {
      setDefaultCommand(new UserElevator());
    }
    
    //--------------------------------------------------------------------
    // Purpose:
    //     Drive using the joystick 
    //
    // Notes:
    //     none
    //--------------------------------------------------------------------  
    public void DriveElevator(Joystick driveJoystick) {
      HandleElevator(driveJoystick.getRawAxis(1));
      HandlePickerElevator(driveJoystick.getRawAxis(3));
    }
    
      //--------------------------------------------------------------------
      // Purpose:
      //     Drive using the joystick 
      //
      // Notes:
      //     none
      //--------------------------------------------------------------------  
      public void HandleElevator(double yElevator) {
      boolean elevatorSwitchTop = RobotMap.elevatorSwitchTop.get();
      boolean elevatorSwitchBottom = RobotMap.elevatorSwitchBottom.get();
      int elevatorEncoderTicks = RobotMap.elevatorEncoder.get();
      
      yElevator = DriveMath.DeadBand(yElevator,0.25);

      if(true == elevatorSwitchBottom)
      {
        // If the elevator is at the bottom and we want ot go down, don't
        if(yElevator > 0)
        {
          yElevator = 0;
        }
        RobotMap.elevatorEncoder.reset();
      }
      else
      {
        if(true == elevatorSwitchTop)
        {
          if(yElevator < 0)
          {
            yElevator = 0;
          }
        }
      }

      RobotMap.elevatorMotor.set(yElevator);
      
    }
 
      //--------------------------------------------------------------------
      // Purpose:
      //     Drive using the joystick 
      //
      // Notes:
      //     none
      //--------------------------------------------------------------------  
      public void HandlePickerElevator(double yElevator) {
      boolean elevatorSwitchTop = RobotMap.pickerElevatorSwitchTop.get();
      boolean elevatorSwitchBottom = RobotMap.pickerElevatorSwitchBottom.get();
      
      yElevator = DriveMath.DeadBand(yElevator,0.25);

      if(true == elevatorSwitchBottom)
      {
        // If the elevator is at the bottom and we want ot go down, don't
        if(yElevator > 0)
        {
          yElevator = 0;
        }
        RobotMap.pickerElevatorEncoder.reset();
      }
      else
      {
        if(true == elevatorSwitchTop)
        {
          if(yElevator < 0)
          {
            yElevator = 0;
          }
        }
      }

      RobotMap.pickerElevatorMotor.set(yElevator);
    }
}

