// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018.subsystems;

import org.usfirst.frc4089.Stealth2018.Constants;
import org.usfirst.frc4089.Stealth2018.RobotMap;
import org.usfirst.frc4089.Stealth2018.commands.*;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class PickerPWM extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController talonSRRF = RobotMap.pickerPWMTalonSRRF;
    private final SpeedController talonSRLR = RobotMap.pickerPWMTalonSRLR;
    private final SpeedController talonSRLF = RobotMap.pickerPWMTalonSRLF;
    private final SpeedController talonSRRR = RobotMap.pickerPWMTalonSRRR;
    private final AnalogInput sharpDistPickCube = RobotMap.pickerPWMSharpDistPickCube;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void runPickerIn () {
    	talonSRRF.set(Constants.pickerRFSpeed);
    	talonSRRR.set(Constants.pickerRRSpeed);
    	talonSRLF.set(-Constants.pickerLFSpeed);
    	talonSRLR.set(-Constants.pickerLRSpeed);
    }
    
    public void runPickerOut () {
    	talonSRRF.set(Constants.pickerRFSpeed);
    	talonSRRR.set(Constants.pickerRRSpeed);
    	talonSRLF.set(-Constants.pickerLFSpeed);
    	talonSRLR.set(-Constants.pickerLRSpeed);
    }
    
    public void runPickerVariable(double speed) {
    	talonSRRF.set(speed);
    	talonSRRR.set(speed);
    	talonSRLF.set(-speed);
    	talonSRLR.set(-speed);
    }
    
    public void stopPicker() {
    	talonSRRF.set(0);
    	talonSRRR.set(0);
    	talonSRLF.set(0);
    	talonSRLR.set(0);
    }
    
   
}

