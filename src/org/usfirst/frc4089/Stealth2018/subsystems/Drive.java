// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018.subsystems;

import org.usfirst.frc4089.Stealth2018.RobotMap;
import org.usfirst.frc4089.Stealth2018.commands.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX sRX1DriveLR = RobotMap.driveSRX1DriveLR;
    private final WPI_TalonSRX sRX2DriveLF = RobotMap.driveSRX2DriveLF;
    private final WPI_TalonSRX sRX3DriveRR = RobotMap.driveSRX3DriveRR;
    private final WPI_TalonSRX sRX4DriveRF = RobotMap.driveSRX4DriveRF;
    private final DifferentialDrive robotDrive41 = RobotMap.driveRobotDrive41;
    private final Encoder quadEncLeftDrive = RobotMap.driveQuadEncLeftDrive;
    private final Encoder quadEncRightDrive = RobotMap.driveQuadEncRightDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final double kAngleSetpoint = 0.0;
	private static final double kP = 0.008; // propotional turning constant
	private static final double kD = 0.0003; // propotional turning constant
	private static final double kI = 0.00001; // propotional turning constant
    
    private double mError = 0.0;
    private double mLastError = 0.0;
    private double mAcumError = 0.0;
    private static final double kMaxAcum = 100;
    private int mDebugCount = 0;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    /**
     * 
     * @param speed -1.0 (reverse) : 1.0 (forward) 
     * @param rotation -1.0 (counter clockwise) : 1.0 (clockwise)
     */
    public void arcDrive (double speed, double rotation) {
       	robotDrive41.arcadeDrive(speed, rotation);
    }
    
    public void tankDrive (double leftSpeed, double rightSpeed, boolean squaredInputs) {
    	robotDrive41.tankDrive(leftSpeed, rightSpeed, squaredInputs);
    }
    
    public void driveJoystick(Joystick driveJoystick) {
    	double y = driveJoystick.getRawAxis(1);
    	double x = driveJoystick.getRawAxis(0);
    	
    	if(true != driveJoystick.getRawButton(4))
    	{
        	if(true == driveJoystick.getRawButton(1))
        	{
        		y = y/5;
        		x = x/5;
        	}
        	else
        	{
        		y = y/2.5;
        		x = x/2.8;
        	}
    	}
    	drive(y,x);
    }	
    
    public void drive(double y, double x) {

    	// IF we are turning, turn off the gyro
    	if(Math.abs(x)>0.2)
    	{
    		RawDrive(y,x);
    		mAcumError = 0;
    	}
    	else
    	{
        	double[] raw = new double[3];
        	RobotMap.pigeonIMU.getRawGyro(raw);
        	double rate = raw[2] *3.1415/180.0;
        	LiveWindow.addSensor("Navigation", "PigeonIMU", (Sendable) RobotMap.pigeonIMU);

        	mError = (kAngleSetpoint - rate);
        	mAcumError += mError;

        	mAcumError=Cap(mAcumError,kMaxAcum);        	
    		double turningValue = (mError * kP)+(mAcumError * kI) + (mLastError * kD);
    		turningValue=Cap(turningValue,1);
    		
    		mLastError = mError;

        	/*RobotMap.netTable.putNumber("error", mError);
        	RobotMap.netTable.putNumber("lastError", mLastError);
        	RobotMap.netTable.putNumber("acumError", mAcumError);    	
        	RobotMap.netTable.putNumber("speed", y);
        	RobotMap.netTable.putNumber("turning", turningValue);*/
    		    		
    		RawDrive(y,turningValue);
    	}
    }
    
    protected void RawDrive(double y, double x) {
    	double targetSpeedL = (y+x) * 4096 * 400.0 / 600; 
    	double targetSpeedR = (y-x) * 4096 * 400.0 / 600;
    	RobotMap.driveSRX2DriveLF.set(ControlMode.Velocity, targetSpeedL);
    	RobotMap.driveSRX1DriveLR.set(ControlMode.Velocity, targetSpeedL);
    	RobotMap.driveSRX4DriveRF.set(ControlMode.Velocity, -1*targetSpeedR);
    	RobotMap.driveSRX3DriveRR.set(ControlMode.Velocity, -1*targetSpeedR);
        
        /*
    	double targetSpeedL = (y+x); 
    	double targetSpeedR = (y-x);
    	RobotMap.driveBaseLeftMain.set(ControlMode.PercentOutput, targetSpeedL);
    	RobotMap.driveBaseLeftSecond.set(ControlMode.PercentOutput, targetSpeedL);
    	RobotMap.driveBaseRightMain.set(ControlMode.PercentOutput, -1*targetSpeedR);
    	RobotMap.driveBaseRightSecond.set(ControlMode.PercentOutput, -1*targetSpeedR);
    	*/  
    	
    	LiveWindow.addSensor("Drive", "Quad Enc LeftDrive", RobotMap.driveQuadEncLeftDrive);
    	LiveWindow.addSensor("Drive", "QuadEnc RightDrive", RobotMap.driveQuadEncRightDrive);

    	if(mDebugCount>20)
    	{
    		System.out.format("%d %d\n", 
    				RobotMap.driveQuadEncLeftDrive,
    				RobotMap.driveQuadEncRightDrive);
    		
    		mDebugCount = 0;
    	}
    	mDebugCount++;
    }

    /** @return 10% deadband */
	double Db(double axisVal) {
		if (axisVal < -0.10)
			return axisVal;
		if (axisVal > +0.10)
			return axisVal;
		return 0;
	}
	/** @param value to cap.
	 * @param peak positive double representing the maximum (peak) value.
	 * @return a capped value.
	 */
	double Cap(double value, double peak) {
		if (value < -peak)
			return -peak;
		if (value > +peak)
			return +peak;
		return value;
	}
    
}

