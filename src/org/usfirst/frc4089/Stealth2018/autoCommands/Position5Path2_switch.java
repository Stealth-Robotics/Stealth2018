// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4089.Stealth2018.autoCommands;

import org.usfirst.frc4089.Stealth2018.Robot;
import org.usfirst.frc4089.Stealth2018.RobotMap;
import org.usfirst.frc4089.Stealth2018.MPPaths.*;
import org.usfirst.frc4089.Stealth2018.commands.AutoRawDrive;
import org.usfirst.frc4089.Stealth2018.commands.AutoRotatePickerRaiseMotor;
import org.usfirst.frc4089.Stealth2018.commands.DrivePathAction;
import org.usfirst.frc4089.Stealth2018.commands.HugBlock;
import org.usfirst.frc4089.Stealth2018.commands.LowerPicker;
import org.usfirst.frc4089.Stealth2018.commands.RaiseMainToTop;
import org.usfirst.frc4089.Stealth2018.commands.RaisePickerToTop;
import org.usfirst.frc4089.Stealth2018.commands.RejectBlock;
import org.usfirst.frc4089.Stealth2018.commands.SetAutoFinished;
import org.usfirst.frc4089.Stealth2018.commands.ShootBlock;
import org.usfirst.frc4089.Stealth2018.commands.WaitTime;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.*;

/**
 *
 */
public class Position5Path2_switch extends CommandGroup {
  public Position5Path2_switch() {
    
  }

  // Called just before this Command runs the first time
  @Override
    protected void initialize() {
	  	Robot.logging.LogEvent("Position5Path2 Source: autoCommands.Position5Path2");
	  	//System.out.println("Position Five Source: Commands.PositionFive");
	  	addSequential(new SetAutoFinished(false));
	    //hug block
	    addSequential(new HugBlock());
	    
	    //get game data
	    String gameData = DriverStation.getInstance().getGameSpecificMessage();
	    int counter = 0;
	    while ((gameData == "" || gameData == null || gameData.length() != 3) && counter < 250) {
	      gameData = DriverStation.getInstance().getGameSpecificMessage();
	      counter ++;
	    }
	    
	    boolean scaleRight = false;
	    boolean switchRight = false;
	    
	    if(gameData.length()>1)
	    {
	      if('R'==gameData.charAt(0))
	      {
	    	  switchRight = true;
	      }
	      if('R'==gameData.charAt(1))
	      {
	        scaleRight = true;
	      }
	    }
	    
	    
	    
	    if (switchRight) {
	    	//lower picker
	        addSequential(new LowerPicker());
	        //raise block to top
	        addSequential(new RaisePickerToTop());
	        //drive to the switch
	    	addSequential(new DrivePathAction(new Red51Path60InPerSec()));
	        //drop it
	        addSequential(new RejectBlock());
	    } else if(scaleRight) {
	    	//lower picker
	        addParallel(new LowerPicker());
	        //raise block to top top
	        addSequential(new RaisePickerToTop());
	        addSequential(new RaiseMainToTop());
	        //drive to scale
	    	addSequential(new DrivePathAction(new Red52Path60InPerSec()));
	    	//Raise the picker a little bit
	        addSequential(new AutoRotatePickerRaiseMotor(1.0));
	        addSequential(new WaitTime(600));
	        addSequential(new AutoRotatePickerRaiseMotor(0));
	        
	        //TODO:make adjustments to this section
	        //rotate to face the scale
	        addSequential(new AutoRawDrive(0,-0.1));
	        addSequential(new WaitTime(750));
	        addSequential(new AutoRawDrive(0,0));
	        
	        //drop it like it is hot
	        addSequential(new ShootBlock());
	    } else {
	    	addSequential(new DrivePathAction(new Move10Path60InPerSec()));
	        System.out.println("Right");
	        //lower picker
	        addSequential(new LowerPicker());
	    }
	    
	    addSequential(new SetAutoFinished());
    
    
  }

  // Called repeatedly when this Command is scheduled to run
  @Override
  protected void execute() {
  }

  // Make this return true when this Command no longer needs to run execute()
  @Override
  protected boolean isFinished() {
    return RobotMap.isAutoFinished;
  }

  // Called once after isFinished returns true
  @Override
  protected void end() {
  }

  // Called when another command which requires one or more of the same
  // subsystems is scheduled to run
  @Override
  protected void interrupted() {
	  end();
  }
}