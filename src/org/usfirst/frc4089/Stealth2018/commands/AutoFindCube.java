// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018.commands;
import org.usfirst.frc4089.Stealth2018.Constants;
import org.usfirst.frc4089.Stealth2018.Robot;
import org.usfirst.frc4089.Stealth2018.RobotMap;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutoFindCube extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	int state;
	final int state_find = 1;
	final int zero_in = 2;
	final int move_towards = 3;
	final int found = 4;
	int last_error;
	final double kP = 0.00225;
	final double kD = 0.0002;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoFindCube() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	state = state_find;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (state == state_find)
    	{
        	if ((int) NetworkTable.getTable("fromPi/pixy").getDouble("pixyFrameSize", -1) <= 0 )
        	{
        		state = zero_in;
        		last_error = 160 - (int) NetworkTable.getTable("fromPi/pixy").getDouble("largestPixyX", -1);
        	}
    		Robot.drive.drive(0, 0.25);
    		System.out.println("Looking for block...");
    		return;
    	}

    	else if (state == zero_in)
    	{
	    	int blockX = (int) NetworkTable.getTable("fromPi/pixy").getDouble("largestPixyX", -1);
	    	if (blockX >= 140 && blockX <= 180)
	    	{
	    		state = move_towards;
	    		return;
	    	}
	    	System.out.println("Zeroing In");
	    	int error = blockX - 160;
	    	double power = error * kP + last_error * kD;
	    	System.out.println(power);
	    	Robot.drive.drive(0, power);
	    	last_error = error;
    	}
    	
    	else if (state == move_towards)
    	{
    		int blockX = (int) NetworkTable.getTable("fromPi/pixy").getDouble("largestPixyX", -1);
    		if (blockX < 140 || blockX > 180)
	    	{
	    		state = zero_in;
	    	}
    		System.out.println("Driving to block...");
    		Robot.drive.drive(0.5, 0);
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (int) NetworkTable.getTable("fromPi/pixy").getDouble("largestPixyWidth", -1) > 200;
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("Block found!");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
