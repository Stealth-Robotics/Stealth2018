// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.sensors.PigeonIMU;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveSRXDriveLR;
    public static WPI_TalonSRX driveSRXDriveLF;
    public static WPI_TalonSRX driveSRXDriveRR;
    public static WPI_TalonSRX driveSRXDriveRF;
    
    public static WPI_TalonSRX pickerSRXPickerL;
    public static WPI_TalonSRX pickerSRXPickerR;
    
    public static DoubleSolenoid pickerDoubleSolenoid1Pick;
    public static Compressor utilitiesPCMCompressor;
    
    // Elevator
    public static Encoder elevatorEncoder;
    public static DigitalInput elevatorSwitchTop;
    public static DigitalInput elevatorSwitchBottom;
    public static WPI_TalonSRX elevatorMotor;

    // Picker
    public static Encoder pickerElevatorEncoder;
    public static DigitalInput pickerElevatorSwitchTop;
    public static DigitalInput pickerElevatorSwitchBottom;
    public static WPI_TalonSRX pickerElevatorMotor;
    
    public static WPI_TalonSRX pickerLeftMotor;
    public static WPI_TalonSRX pickerRightMotor;
    
    public static PIDController elevatorPIDController1;
    public static DigitalInput pickerSwitchTop;
    public static DigitalInput pickerSwitch1Picker;
    public static DoubleSolenoid pickerDSolenoidArticulationR;
    public static DoubleSolenoid pickerDoubleSolenoid1;
    public static WPI_TalonSRX climberSRR8Climb;
    public static DoubleSolenoid climberDoubleSolenoid2Climb;
    public static AnalogGyro navigationAnalogGyro1;
    public static Ultrasonic navigationUltrasonic1;
    public static DigitalInput navigationDigitalInput1NullZoneColor;
//    public static PowerDistributionPanel utilitiesPowerDistributionPanel1;
    public static SpeedController pickerPWMTalonSRRF;
    public static SpeedController pickerPWMTalonSRLR;
    public static SpeedController pickerPWMTalonSRLF;
    public static SpeedController pickerPWMTalonSRRR;
    public static AnalogInput pickerPWMSharpDistPickCube;

    public static Solenoid pickerArms;
    public static Solenoid climberGrabber;
    
    public static PigeonIMU pigeonIMU;

    public static NetworkTable netTable;
    
    
    public static void init() {
        System.out.println("CAN mapping init in robotmap");
        driveSRXDriveLR = new WPI_TalonSRX(Constants.CANTalonSRXDriveLR);
        driveSRXDriveLF = new WPI_TalonSRX(Constants.CANTalonSRXDriveLF);
        driveSRXDriveRR = new WPI_TalonSRX(Constants.CANTalonSRXDriveRR);
        driveSRXDriveRF = new WPI_TalonSRX(Constants.CANTalonSRXDriveRF);

        pickerSRXPickerL = new WPI_TalonSRX(Constants.CANTalonSRXPickerL);
        pickerSRXPickerR = new WPI_TalonSRX(Constants.CANTalonSRXPickerR);
        
        //pickerDoubleSolenoid1Pick = new DoubleSolenoid(0, 0, 1);
//        utilitiesPowerDistributionPanel1 = new PowerDistributionPanel(18);
        utilitiesPCMCompressor = new Compressor(16);
        utilitiesPCMCompressor.setClosedLoopControl(true);

        elevatorSwitchTop  = new DigitalInput(9);
        elevatorSwitchBottom = new DigitalInput(8);
        elevatorEncoder  = new Encoder(0, 1, true);
        elevatorMotor = new WPI_TalonSRX(Constants.CANTalonSRXElevator);
        
        pickerElevatorSwitchTop = new DigitalInput(7);
        pickerElevatorSwitchBottom = new DigitalInput(6);
        pickerElevatorEncoder  = new Encoder(2, 3, false);
        pickerElevatorMotor = new WPI_TalonSRX(Constants.CANTalonSRXClimb);
     
        pickerLeftMotor = new WPI_TalonSRX(Constants.CANTalonSRXPickerL);
        pickerRightMotor = new WPI_TalonSRX(Constants.CANTalonSRXPickerR);
        
        pickerArms = new Solenoid(16,5);
        climberGrabber = new Solenoid(16,4);

        /*        
        elevatorSRX5Elevator = new WPI_TalonSRX(Constants.CANTalonSRXElevator);
        
        
        climberSRR8Climb = new WPI_TalonSRX(Constants.CANTalonSRXClimb);
                
        //driveQuadEncRightDrive.setPIDSourceType(PIDSourceType.kRate);
        elevatorQuadEncElevator = new Encoder(4, 5, false, EncodingType.k4X);
//        LiveWindow.addSensor("Elevator", "Quad Enc Elevator", elevatorQuadEncElevator);
        elevatorQuadEncElevator.setDistancePerPulse(1.0);
        //elevatorQuadEncElevator.setPIDSourceType(PIDSourceType.kRate);
        
       // elevatorPIDController1 = new PIDController(1.0, 0.0, 0.0, 0.0, elevatorQuadEncElevator, elevatorSRX5Elevator, 0.02);
        //LiveWindow.addActuator("Elevator", "PID Controller 1", elevatorPIDController1);
       // elevatorPIDController1.setContinuous(false);
       // elevatorPIDController1.setAbsoluteTolerance(0.2);

        //elevatorPIDController1.setOutputRange(-1.0, 1.0);
        elevatorSwitch7ElevatorTop = new DigitalInput(7);
//        LiveWindow.addSensor("Elevator", "Switch7ElevatorTop", elevatorSwitch7ElevatorTop);
        
        elevatorSwitch8ElevatorBottom = new DigitalInput(8);
//        LiveWindow.addSensor("Elevator", "Switch8ElevatorBottom", elevatorSwitch8ElevatorBottom);
                
               
        pickerSwitch1Picker = new DigitalInput(6);
//        LiveWindow.addSensor("Picker", "Switch1Picker", pickerSwitch1Picker);
        
//        LiveWindow.addActuator("Picker", "Double Solenoid 1 Pick", pickerDoubleSolenoid1Pick);
        
        pickerDSolenoidArticulationR = new DoubleSolenoid(0, 4, 5);
//        LiveWindow.addActuator("Picker", "DSolenoidArticulationR", pickerDSolenoidArticulationR);
        
        pickerDoubleSolenoid1 = new DoubleSolenoid(0, 6, 7);
//        LiveWindow.addActuator("Picker", "Double Solenoid 1", pickerDoubleSolenoid1);
               
                
        climberDoubleSolenoid2Climb = new DoubleSolenoid(0, 2, 3);
//        LiveWindow.addActuator("Climber", "Double Solenoid 2 Climb", climberDoubleSolenoid2Climb);
        
        navigationAnalogGyro1 = new AnalogGyro(0);
//        LiveWindow.addSensor("Navigation", "AnalogGyro 1", navigationAnalogGyro1);
        navigationAnalogGyro1.setSensitivity(0.007);
        navigationUltrasonic1 = new Ultrasonic(9, 10);
//        LiveWindow.addSensor("Navigation", "Ultrasonic 1", navigationUltrasonic1);
        
        navigationDigitalInput1NullZoneColor = new DigitalInput(11);
//        LiveWindow.addSensor("Navigation", "Digital Input 1 Null Zone Color", navigationDigitalInput1NullZoneColor);
*/        
/*        
//        LiveWindow.addActuator("Utilities", "PCMCompressor", utilitiesPCMCompressor);
        
        pickerPWMTalonSRRF = new Talon(1);
//        LiveWindow.addActuator("PickerPWM", "TalonSRRF", (Talon) pickerPWMTalonSRRF);
        pickerPWMTalonSRRF.setInverted(false);
        pickerPWMTalonSRLR = new Talon(2);
//        LiveWindow.addActuator("PickerPWM", "TalonSRLR", (Talon) pickerPWMTalonSRLR);
        pickerPWMTalonSRLR.setInverted(false);
        pickerPWMTalonSRLF = new Talon(3);
//        LiveWindow.addActuator("PickerPWM", "TalonSRLF", (Talon) pickerPWMTalonSRLF);
        pickerPWMTalonSRLF.setInverted(false);
        pickerPWMTalonSRRR = new Talon(0);
//        LiveWindow.addActuator("PickerPWM", "TalonSRRR", (Talon) pickerPWMTalonSRRR);
        pickerPWMTalonSRRR.setInverted(false);
        pickerPWMSharpDistPickCube = new AnalogInput(1);
//        LiveWindow.addSensor("PickerPWM", "SharpDistPickCube", pickerPWMSharpDistPickCube);
*/        
        pigeonIMU = new PigeonIMU(driveSRXDriveRR);
        pigeonIMU.setFusedHeading(0.0, 10);
        netTable = NetworkTable.getTable("FRCRobot");
    }
    
    
    public static void SetUpTalonsForTele()
    {
      SetUpTalonForTele(driveSRXDriveLF);
      SetUpTalonForTele(driveSRXDriveRF);
      driveSRXDriveLR.set(ControlMode.Follower, Constants.CANTalonSRXDriveLF);
      driveSRXDriveRR.set(ControlMode.Follower, Constants.CANTalonSRXDriveRF);
      driveSRXDriveRF.setInverted(true);
      driveSRXDriveRR.setInverted(true);
      
    }
    
    static void SetUpTalonForTele(WPI_TalonSRX talon) {
      talon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, Constants.kTimeoutMs);
      talon.setSensorPhase(true);

      /* set the peak and nominal outputs, 12V means full */
      talon.configNominalOutputForward(0, Constants.kTimeoutMs);
      talon.configNominalOutputReverse(0, Constants.kTimeoutMs);
      talon.configPeakOutputForward(1, Constants.kTimeoutMs);
      talon.configPeakOutputReverse(-1, Constants.kTimeoutMs);

      /* set closed loop gains in slot0 */
      talon.config_kF(Constants.kPIDLoopIdx, 0.34, Constants.kTimeoutMs);
      talon.config_kP(Constants.kPIDLoopIdx, 0.2, Constants.kTimeoutMs);
      talon.config_kI(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);
      talon.config_kD(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);

      talon.setSafetyEnabled(true);
      talon.setExpiration(Constants.kTimeoutMs);
    }

    public static void SetUpTalonsForAuto()
    {
      SetUpTalonForAuto(driveSRXDriveLF);
      SetUpTalonForAuto(driveSRXDriveRF);
      driveSRXDriveLR.set(ControlMode.Follower, Constants.CANTalonSRXDriveLF);
      driveSRXDriveRR.set(ControlMode.Follower, Constants.CANTalonSRXDriveRF);
      driveSRXDriveRF.setInverted(true);
      driveSRXDriveRR.setInverted(true);
    }
    
    static void SetUpTalonForAuto(WPI_TalonSRX talon) {
      talon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);
      talon.setSensorPhase(true); /* keep sensor and motor in phase */
      talon.configNeutralDeadband(Constants.kNeutralDeadband, Constants.kTimeoutMs);

      talon.config_kF(0, 0.076, Constants.kTimeoutMs);
      talon.config_kP(0, 2.000, Constants.kTimeoutMs);
      talon.config_kI(0, 0.0, Constants.kTimeoutMs);
      talon.config_kD(0,20.0, Constants.kTimeoutMs);

      talon.configMotionProfileTrajectoryPeriod(20, Constants.kTimeoutMs); //Our profile uses 10 ms timing
      /* status 10 provides the trajectory target for motion profile AND motion magic */
      talon.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 20, Constants.kTimeoutMs);
      
    }
   
}
